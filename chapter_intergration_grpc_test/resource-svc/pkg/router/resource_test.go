// Code generated by protoc-gen-go-test. DO NOT EDIT.

package router

import (
	"context"
	"errors"
	"testing"

	cegrpc "github.com/gotomicro/ego/client/egrpc"
	"github.com/gotomicro/ego/core/eerrors"
	"github.com/stretchr/testify/assert"
	resourcev1 "go-engineering/proto/pb/resource/v1"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/proto"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the ego package it is being compiled against.

// TestList generated by protoc-gen-go-test, you can fill test logic by yourself.
// @Override=true
func TestList(t *testing.T) {
	cli := resourcev1.NewResourceClient(cegrpc.DefaultContainer().Build(cegrpc.WithDialOption(grpc.WithContextDialer(bufDialer))).ClientConn)
	ctx := context.Background()
	tests := []struct {
		name    string
		req     *resourcev1.ListRequest
		wantRes *resourcev1.ListResponse
		wantErr error
	}{
		// TODO: Add or modify test cases.
		{"正常获取文章", &resourcev1.ListRequest{}, &resourcev1.ListResponse{
			List: []*resourcev1.Info{
				{
					Id:       1,
					Title:    "测试文章",
					Nickname: "ego",
				},
			},
		}, nil},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			res, err := cli.List(ctx, tt.req)
			assert.True(t, errors.Is(eerrors.FromError(err), tt.wantErr))
			assert.True(t, proto.Equal(tt.wantRes, res))
			t.Logf("res: %+v", res)
		})
	}
}

// TestDetail generated by protoc-gen-go-test, you can fill test logic by yourself.
// @Override=true
func TestDetail(t *testing.T) {
	cli := resourcev1.NewResourceClient(cegrpc.DefaultContainer().Build(cegrpc.WithDialOption(grpc.WithContextDialer(bufDialer))).ClientConn)
	ctx := context.Background()
	tests := []struct {
		name    string
		req     *resourcev1.DetailRequest
		wantRes *resourcev1.DetailResponse
		wantErr error
	}{
		// TODO: Add or modify test cases.
		{"正常获取文章", &resourcev1.DetailRequest{
			Id: 1,
		}, &resourcev1.DetailResponse{
			Title:    "测试文章",
			Nickname: "ego",
			Content:  "测试文章内容",
		}, nil},
		{"异常获取文章", &resourcev1.DetailRequest{
			Id: 2,
		}, nil, resourcev1.ResourceErrNotFound()},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			res, err := cli.Detail(ctx, tt.req)
			assert.True(t, errors.Is(eerrors.FromError(err), tt.wantErr))
			assert.True(t, proto.Equal(tt.wantRes, res))
			t.Logf("res: %+v", res)
		})
	}
}
